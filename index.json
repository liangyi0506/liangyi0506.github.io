[{"categories":["github"],"content":"一. 什么是GitHub ​ github是一个基于git的代码托管平台，付费用户可以建私人仓库，我们一般的免费用户只能使用 公共仓库，也就是代码要公开。 详细的参考文档，可以查阅：易百教程的文档 ","date":"2023-02-19","objectID":"/github%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/:1:0","tags":["github"],"title":"github使用教程","uri":"/github%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/"},{"categories":["github"],"content":"二. 注册GitHub账户，以及创建仓库 注册GitHub账户 登录GitHub的官网地址：(https://github.com/) 创建远程仓库 Create a New Repository，填好名称后Create，之后会出现一些仓库的配置信息 本地GitHub安装 下载 git的Windows版本 Git for Windows 之后，安装即可 本地仓库创建 （1）首先在本地创建ssh key ssh-keygen -t rsa -C \"your_email@youremail.com\" ​ your_email@youremail.com 是你在注册GitHub时所用的邮箱，之后会要求确认路径和输入 密码，如果我们按照默认选项的话，会生成一个id_rsa.pub （2）复制id_rsa.pub中的内容到GitHub中 SSH Keys中 ​ github上，进入 Account Settings（账户配置），左边选择SSH Keys，Add SSH Key,title随便 填，粘贴在你电脑上生成的key。 ​ git三部分 ​ 验证是否成功： ssh -T git@github.com ​ 如果是第一次的会提示是否continue，输入yes就会看到：You’ve successfully authenticated, but GitHub does not provide shell access 。这就表示已成功连上github。 （3）设置username和email git config --global user.name \"your name\" git config --global user.email \"your_email@youremail.com\" git config --global --list # 查看是否设置成功 （4）本地设置仓库 ​ 在本地设置仓库有两种办法： ​ 一种是将已有的仓库克隆下来； ​ 一种是将现有的本地仓库链接并上传 克隆已有的仓库： ​ 如果是克隆本地的仓库 git clone /path/to/repository ​ 如果是远程服务器的仓库 git clone username@host:/path/to/repository 上传现有的本地仓库： ​ 如果现在的文件夹还不是git，需要在要上传的文件下执行： git init ​ 然后，链接到某个远程服务器 git remote add origin \u003cserver\u003e ","date":"2023-02-19","objectID":"/github%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/:2:0","tags":["github"],"title":"github使用教程","uri":"/github%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/"},{"categories":["github"],"content":"三. GitHub工作流 ​ git的本地维护由三部分组成：第一个是你的工作目录——实际持有文件；第二个是缓存区(Index)——临时保存改动；最后是HEAD——指向最后一次提交的结果 git三部分 将更改保存至缓存区 git add file_name # 提交单个文件的修改 或者 git add . # 提交所有文件的修改 提交修改到HEAD git commit -m \"代码提交信息\" 注意：此时，改动已经提交到本地的HEAD，但是还没有同步到远程仓库 推送改动到远程仓库 如果此时还没有克隆现有仓库，需要链接某个远程服务器： git remote add origin \u003cserver\u003e # 例子：git remote add origin git@github.com:liangyi0506/liangyi0506.github.io.git 现在，可以将修改推送到远程仓库了： git push -u origin main # git push -u \u003c指定远程主机名\u003e \u003c本地分支名\u003e:\u003c远程分支名\u003e 可以把main换成任何你想要推送的任何分支 注意：如果不修改 push 后面的参数的话，以后不需要重复添加这些参数 参数： ​ -u ：指定默认主机，这样后面就可以不加任何参数使用git push ","date":"2023-02-19","objectID":"/github%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/:3:0","tags":["github"],"title":"github使用教程","uri":"/github%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/"},{"categories":["个人网站建设"],"content":"一. 为什么要创建自己的个人博客网站 ​ 我们在进行学习的时候，尤其是在学习新的知识的时候，要想牢固掌握，最好的办法就是将新学习的。 ​ 知识向别人讲述，但是这个倾听者不好找，学习写博客同样是一种讲述的办法，同时也是将自己的知识进行收纳整理的一个过程。 ","date":"2023-02-18","objectID":"/%E4%BD%BF%E7%94%A8hugo-githubpages%E5%88%9B%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/:1:0","tags":["hugo","github"],"title":"Windows下使用hugo+github pages 创建自己的个人博客","uri":"/%E4%BD%BF%E7%94%A8hugo-githubpages%E5%88%9B%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"},{"categories":["个人网站建设"],"content":"二. 为什么使用hugo+GitHub Pages hugo是一款可以方便生成可展示静态网页的工具，方便了不擅长前端编码的同学 在hugo下可以舒服地使用markdown进行博客文章页面的书写 我们需要一个展示的平台——一个服务器来存放我们的文章，CSDN这类的国内平台真的是越用越气人， 而且不支持个性化定制，GithubPages技术已经很成熟，而且参考资料众多 ","date":"2023-02-18","objectID":"/%E4%BD%BF%E7%94%A8hugo-githubpages%E5%88%9B%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/:2:0","tags":["hugo","github"],"title":"Windows下使用hugo+github pages 创建自己的个人博客","uri":"/%E4%BD%BF%E7%94%A8hugo-githubpages%E5%88%9B%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"},{"categories":["个人网站建设"],"content":"三. 如何使用hugo+Github Pages 创建自己的博客 ","date":"2023-02-18","objectID":"/%E4%BD%BF%E7%94%A8hugo-githubpages%E5%88%9B%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/:3:0","tags":["hugo","github"],"title":"Windows下使用hugo+github pages 创建自己的个人博客","uri":"/%E4%BD%BF%E7%94%A8hugo-githubpages%E5%88%9B%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"},{"categories":["个人网站建设"],"content":"（一）下载并安装hugo 1. 确认自己的安装环境 ​ 我这里是windows11，使用的是powershell7作为部署工具，这里可以参考 ​ https://gohugo.io/installation/windows/ ​ 我使用了chocolatey作为下载工具， ​ 在powershell7的管理员模式下下安装chocolatey的命令如下 Set-ExecutionPolicy Bypass -Scope Process -Force; [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor 3072; iex ((New-Object System.Net.WebClient).DownloadString('https://community.chocolatey.org/install.ps1')) 2. 下载hugo的命令如下 choco install hugo-extended ","date":"2023-02-18","objectID":"/%E4%BD%BF%E7%94%A8hugo-githubpages%E5%88%9B%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/:3:1","tags":["hugo","github"],"title":"Windows下使用hugo+github pages 创建自己的个人博客","uri":"/%E4%BD%BF%E7%94%A8hugo-githubpages%E5%88%9B%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"},{"categories":["个人网站建设"],"content":"（二）使用hugo创建自己的站点 1. 使用powershell打开自己想要创建的站点的文件夹路径 cd 自己想要创建的站点的文件夹路径 2. 创建自己的站点 hugo new_site ​ 这时候你会发现文件夹下多了一个文件夹叫new_site, 这就是我们接下来要编辑的hugo项目 ​ 接下来进入我们的项目 cd new_site ","date":"2023-02-18","objectID":"/%E4%BD%BF%E7%94%A8hugo-githubpages%E5%88%9B%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/:3:2","tags":["hugo","github"],"title":"Windows下使用hugo+github pages 创建自己的个人博客","uri":"/%E4%BD%BF%E7%94%A8hugo-githubpages%E5%88%9B%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"},{"categories":["个人网站建设"],"content":"（三）挑选自己喜欢的主题，以LoveIt为例 1. 打开hugo的主题网站，网址如下 ​ https://themes.gohugo.io/ 2. 我选择了LoveIt作为主题，网址如下 ​ https://hugoloveit.com/ ​ 这个主题有详细的模块，而且提供了丰富的参考文档教你如何使用，并且支持中文 3.下载LoveIt主题 ​ 在new_site的主目录下，运行 git clone https://github.com/dillonzq/LoveIt.git themes/LoveIt ​ 这样主题就会下载到themes文件夹下面 ","date":"2023-02-18","objectID":"/%E4%BD%BF%E7%94%A8hugo-githubpages%E5%88%9B%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/:3:3","tags":["hugo","github"],"title":"Windows下使用hugo+github pages 创建自己的个人博客","uri":"/%E4%BD%BF%E7%94%A8hugo-githubpages%E5%88%9B%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"},{"categories":["个人网站建设"],"content":"（四）生成自己的第一篇文章 1. 使用如下的命令创建自己的第一篇文章 hugo new posts/first_post.md ​ **注意：**使用编辑器打开就会发下，使用这种方式创建的markdown文件，中draft参数是true，需要把他变成false，或者使用hugo -D / –buildDrafts serve 才能显示 2. 在本地启动站点 hugo serve ​ 登录 http://localhost:1313 ​ 就可以看到启动的网站 ","date":"2023-02-18","objectID":"/%E4%BD%BF%E7%94%A8hugo-githubpages%E5%88%9B%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/:3:4","tags":["hugo","github"],"title":"Windows下使用hugo+github pages 创建自己的个人博客","uri":"/%E4%BD%BF%E7%94%A8hugo-githubpages%E5%88%9B%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"},{"categories":["个人网站建设"],"content":"（五）将站点部署到GitHub上 1. 在你的GitHub账户中创建一个库，命名为 github_user_name.github.io 2. 首先生成我们可以公开展示的文件夹，也就是需要上传到github上的文件夹public，执行 hugo --theme=LoveIt --baseUrl=\"https://liangyi0506.github.io/\" ​ 这样你会发下在网站的主目录下生成了一个public文件夹，这就是我们用来展示的文件夹，也是需要 上传到GitHub的文件夹 3. 之后，执行基本的git命令将public下文件上传到我们刚刚创建的库中 cd public git init // 初始化本地仓库 git add . // 添加文件到本地 git commit -m \"fist commit\" // 添加文件描述信息 git remote add origin 远程仓库地址 // 链接远程仓库 git pull origin main // 把本地仓库的变化链接到远程仓库 git push -u origin main // 把本地仓库的文件推送到远程仓库 ","date":"2023-02-18","objectID":"/%E4%BD%BF%E7%94%A8hugo-githubpages%E5%88%9B%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/:4:0","tags":["hugo","github"],"title":"Windows下使用hugo+github pages 创建自己的个人博客","uri":"/%E4%BD%BF%E7%94%A8hugo-githubpages%E5%88%9B%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"},{"categories":["个人网站建设"],"content":"（六）登录我们的博客地址 ​ 登录 ​ liangyi0506.github.io ​ 即可, 这样任何人就都能访问你的网页 ","date":"2023-02-18","objectID":"/%E4%BD%BF%E7%94%A8hugo-githubpages%E5%88%9B%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/:5:0","tags":["hugo","github"],"title":"Windows下使用hugo+github pages 创建自己的个人博客","uri":"/%E4%BD%BF%E7%94%A8hugo-githubpages%E5%88%9B%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"}]